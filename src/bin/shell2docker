#!/bin/bash
#
# DoSH - Docker SHell
# https://github.com/grycap/dosh
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Variables to be used in the configuration file
_DOSH_KEYS="SCRIPTSFOLDER RUNSCRIPTS LOGFILE UNSAFEEXPAND CONF DEBUG RUNCOMMANDS VERBOSE CONTAINERIMAGE CONTAINERCOMMAND INHERIT DOCKERPARAMETERS PREFIXNAME"
_DOSH_INHERITABLE="DOCKERPARAMETERS"

# Functions to output information depending on the configuration
function p_errfile() {
  if [ "$LOGFILE" == "" ]; then
    echo "$@" >&2
  else
    touch -f "$LOGFILE"
    if [ $? -eq 0 ]; then
      echo "$@" >> "$LOGFILE"
    fi
  fi
}

function p_error() {
  local O_STR="[ERROR] $(date +%Y.%m.%d-%X) $@"
  p_errfile "$O_STR"
}

function p_info() {
  if [ "$VERBOSE" == "true" ]; then
    local TS="$(date +%Y.%m.%d-%X)"
    while read L; do
      p_errfile "[INFO] $TS $@"
    done <<< "$@"
  fi
}

function p_debug() {
  if [ "$DEBUG" == "true" ]; then
    local TS="$(date +%Y.%m.%d-%X)"
    while read L; do
      p_errfile "[DEBUG] $TS $L"
    done <<< "$@"
  fi
}

# Checks whether a string is in the space-separated list or not
function element_in_list() {
  local ELEMENT="$1"
  local LIST="$(echo "$2" | tr '\n' ' ')"

  if [[ "$LIST" =~ (^|[[:blank:]]+)$ELEMENT([[:blank:]]+|$) ]]; then
    return 0
  fi
  return 1
}

# Checks whether a configuration key is in the list of valid configuration keys
function valid_key() {
  if element_in_list "$1" "$_DOSH_KEYS"; then return 0; else return 1; fi
}

# Checks whether a configuration key is in the list of inheritable configuration keys
function inheritable() {
  if element_in_list "$1" "$_DOSH_INHERITABLE"; then return 0; else return 1; fi
}

# Reads a configuration file and set its variables (removes comments, blank lines, trailing spaces, etc. and
# then reads KEY=VALUE settings)
function readconf() {
  local _TXT_CONF APPLIES
  local CONF_FILE=$1
  local INSECTION=false

  p_debug "User for the configuration $USER group: $GROUP, groups: $GROUPS"

  # If the config file does not exist return failure
  if [ ! -e "$CONF_FILE" ]; then
    return 1
  fi

  # First we read the config file
  _TXT_CONF="$(cat "$CONF_FILE" | sed 's/#.*//g' | sed 's/^[ \t]*//g' | sed 's/[ \t]*$//g' | sed '/^$/d')"

  # The first section applies to current settings
  APPLIES=true

  # Let's read the lines
  while read L; do

    if [[ "$L" =~ ^\[.*\]$ ]]; then
      INSECTION=true

      # If we are reading a section, let's see if it is applicable to us
      IFS=':' read SECTION OBJECT <<< "${L:1:-1}"
      APPLIES=false
      case "$SECTION" in
        user) 
          if [ "$USER" != "" -a "$OBJECT" == "$USER" ]; then APPLIES=true; fi;;
        group) 
          if element_in_list "$GROUP" "$GROUPNAMES"; then
            APPLIES=true
          fi;;
        *)  p_error "ignoring the contents of the invalid section $L";;
      esac
    else

      # If the current content applies to us, let's process it
      if [ "$APPLIES" == "true" ]; then
        IFS='=' read KEY VALUE <<< "$L"
        # If it is a KEY=VALUE expression and the KEY is valid, we'll get its value
        if valid_key "$KEY"; then
          if [ "$UNSAFEEXPAND" == "true" ]; then
            VALUE="$(eval echo "$VALUE")"
          else
            VALUE="$(echo "$VALUE" | envsubst)"
          fi
          if inheritable "$KEY" && [ "$INHERIT" == "true" ]; then
            read -d '\0' "$KEY" <<< "${!KEY} ${VALUE}"
          else
            read -d '\0' "$KEY" <<< "${VALUE}"
          fi
        else
          p_error "ignoring invalid key $KEY"
        fi
      fi
    fi
  done <<< "$_TXT_CONF"
  return 0
}

# Reads a list of configuration files and repeats reading if the var CONF is changed
# because it means that the user needs additional configuration files.
function readconffiles() {
  local CFILE _CONFFILES
  _CONFFILES="$@"
  for CFILE in $_CONFFILES; do
    p_debug "reading configuration file $CFILE"
    readconf "$CFILE" "$USER" ""
  done
  if [ "$CONF" != "$_CONFFILES" ]; then
    readconffiles $CONF
  fi
}

function callscripts() {
  local L_FILES
  local E RESULT RETVAL
  if [ "$SCRIPTSFOLDER" != "" ]; then
    if [ -d "$SCRIPTSFOLDER" ]; then
      for E in $SCRIPTSFOLDER/*; do
        if [ ! -d "$E" -a -x "$E" ]; then
          RESULT="$($E $@ 2>&1)"
          L_P=("$@")
          p_debug "$(printf "command %s %s\nretval: %s\noutput: %s" "$E" "${L_P[*]}" "$?" "$RESULT")"
        fi
      done
    else
      p_debug "folder $SCRIPTSFOLDER does not exist"
      return 1
    fi
  fi
}

# Get the user that issued the command (even if ran from SUDO)
if [ $SUDO_USER ]; then USERNAME=$SUDO_USER; else USERNAME="$(whoami)"; fi

USER="$USERNAME"
U_UID="$(id -u $USERNAME)"
U_GID="$(id -g $USERNAME)"
GROUPNAMES=
for GROUP in $(id -G $USERNAME); do
  GROUP="$(getent group $GROUP | cut -d: -f1)"
  GROUPNAMES="${GROUPNAMES}${GROUP} "
done
GROUPNAMES="${GROUPNAMES::-1}"
GROUP="$(getent group $U_GID | cut -d: -f1)"

# Set the default values
RUNCOMMANDS=true
CONTAINERIMAGE="alpine"
CONTAINERCOMMAND="ash"
DOCKERPARAMETERS=
INHERIT=true
VERBOSE=false
SCRIPTSFOLDER=/etc/dosh/scripts
LOGFILE=/var/log/dosh.log
RUNSCRIPTS=false

# Read the default configuration file
readconffiles "/etc/dosh.conf"

# Set the name of the container for the user
CONTAINERNAME="${PREFIXNAME:-dosh-}${USERNAME}"

# Output variables for debug
p_debug "Variables
----------------------------------
USER=$USERNAME
GROUP=$GROUP
GROUPNAMES=$GROUPNAMES
CONF=$CONF
CONTAINERNAME=$CONTAINERNAME
CONTAINERIMAGE=$CONTAINERIMAGE
CONTAINERCOMMAND=$CONTAINERCOMMAND
DOCKERPARAMETERS=$DOCKERPARAMETERS
INHERIT=$INHERIT
RUNCOMMANDS=$RUNCOMMANDS
VERBOSE=$VERBOSE
SCRIPTSFOLDER=$SCRIPTSFOLDER
LOGFILE=$LOGFILE
RUNSCRIPTS=$RUNSCRIPTS"

# Check if the container for the user is running
RUNNING="$(docker inspect -f "{{.State.Running}}" "$CONTAINERNAME" 2> /dev/null)"
if [ $? -ne 0 ]; then

  # If it does not exist, we'll try to create it
  p_debug "container $CONTAINERNAME does not exist"
  p_debug "executing:" docker run -h "$(hostname)" -u $U_UID:$U_GID $DOCKERPARAMETERS -id --name "$CONTAINERNAME" "$CONTAINERIMAGE" "$CONTAINERCOMMAND"
  if [ "$RUNCOMMANDS" == "true" ]; then
    callscripts prerun "$CONTAINERDID" -h "$(hostname)" -u $U_UID:$U_GID $DOCKERPARAMETERS -id --name "$CONTAINERNAME" "$CONTAINERIMAGE" "$CONTAINERCOMMAND"
    CONTAINERDID=$(docker run -h "$(hostname)" -u $U_UID:$U_GID $DOCKERPARAMETERS -id --name "$CONTAINERNAME" "$CONTAINERIMAGE" "$CONTAINERCOMMAND" 2>&1)
    if [ $? -ne 0 ]; then
      p_error "failed to create container $CONTAINERNAME"
      exit 1
    else
      callscripts run "$CONTAINERDID" -h "$(hostname)" -u $U_UID:$U_GID $DOCKERPARAMETERS -id --name "$CONTAINERNAME" "$CONTAINERIMAGE" "$CONTAINERCOMMAND"
    fi
  else
    p_info "docker commands are not being run because of configuration (var RUNCOMMANDS is not set to true)"
  fi
  p_debug "container $CONTAINERNAME created"
else

  # If it exists, let's check if it is running
  if [ "$RUNNING" == "false" ]; then

    # If it is not running, we'll try to start it 
    p_debug "container $CONTAINERNAME exists but is not running"
    p_debug "executing:" docker start "$CONTAINERNAME"
    if [ "$RUNCOMMANDS" == "true" ]; then
      callscripts prestart "$CONTAINERNAME"    
      docker start "$CONTAINERNAME" > /dev/null
      if [ $? -ne 0 ]; then
        p_error "failed to start container"
        exit 1
      else
        callscripts start "$CONTAINERNAME"    
      fi
    else
      p_info "docker commands are not being run because of configuration (var RUNCOMMANDS is not set to true)"
    fi
    p_debug "container $CONTAINERNAME started"
  fi
fi

# Finally we enter in the container
TERMFLAGS=
if [ "$TERM" != "dumb" -a "$TERM" != "unknown" ]; then
  p_debug "need to allocate terminal because TERM=$TERM"
  TERMFLAGS=-t
fi

CONTAINERCOMMAND=( "$CONTAINERCOMMAND" "$@" )
if [ "$RUNCOMMANDS" == "true" ]; then
  callscripts preexec "$CONTAINERNAME" "${CONTAINERCOMMAND[@]}"
  p_debug "executing: docker exec $TERMFLAGS $CONTAINERNAME ${CONTAINERCOMMAND[@]}"
  docker exec -i $TERMFLAGS "$CONTAINERNAME" "${CONTAINERCOMMAND[@]}"
  callscripts exec "$CONTAINERNAME" "${CONTAINERCOMMAND[@]}"
else
  p_info "docker commands are not being run because of configuration (var RUNCOMMANDS is not set to true)"
fi
