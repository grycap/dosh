#!/bin/bash
#
# DoSH - Docker SHell
# https://github.com/grycap/dosh
#
# Copyright (C) GRyCAP - I3M - UPV 
# Developed by Carlos A. caralla@upv.es
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Enable debug information in stderr
#  * Default: false. Uncomment the next line to enable DEBUG mode
# DEBUG=true

# Enable or disable the execution of the docker commands (for debugging purposes only)
#  * Default: true. Uncomment the next line to disable execution
# RUNCOMMANDS=false

# Show more information in the stdout
#  * Default: false. Uncomment the next line to output extra information
# VERBOSE=true

# File in which debug info is going to be dumped. If this is set to blank, the output will be
#  to the stderr.
#
# NOTE: if using "DEBUG" setting, some sensitive information may be dumped to this file, so
#  you are advised to set the proper permissions to this file (e.g. touch $FILE, chown to root and
#  chmod 600)
#
#  * Default: /var/log/dosh.log. Uncomment the next line to customize the log file
# LOGFILE=/var/log/dosh.log

# Other configuration files to read. Take into account that the files will be read in order.
#  This variable can also be included in the subsections that customize the values for each user
#  or group. It means that e.g. you can set CONF=/etc/dosh/conf.users.d/user-doshuser.conf inside
#  a section for user "doshuser" (i.e. [user:doshuser]).
#
#  NOTE: This parameter can be customized for each user or group in its sections (i.e. [user:...] 
#  or [group:...]).
#
#  NOTE: this variable is inheritable (see INHERIT variable).
#
#  * Default: None. Comment the next line to disable reading the files in folder /etc/dosh/conf.d
CONF=/etc/dosh/conf.d/*

# Use unsafe expansion of variables and commands in the configuration files.
#
#  Safe expansion of files only expands env variables while unsafe expansion enables executing 
#  subcommands in the parameters of this file.
#
#   e.g. DOCKERPARAMETERS=-v /home/$USER:/home/$USER 
#    if run by user "doshuser", will expand to DOCKERPARAMETERS=-v /home/doshuser:/home/doshuser
#    independent from using unsafe expansion or not
#
#   e.g. DOCKERPARAMETERS=-v /home/$(whoami):/home/$(whoami) 
#    if run by user "doshuser", will expand to DOCKERPARAMETERS=-v /home/doshuser:/home/doshuser
#    if using unsafe expansion, but if unsafe expansion is not enabled, it will remain as
#    DOCKERPARAMETERS=-v /home/$(whoami):/home/$(whoami) 
#
#  It is possible to enable or disable the unsafe expansion at any time in the file. You just need
#  to re-asign the proper value to the variable UNSAFEEXPAND depending on what you want to do
#
#  NOTE: it should not be any security problem to enable the unsafe expand because it is only used
#    while reading the configuration file, and this file should only be managed by "root".
#
#  * Default: false. Un comment the next line to enable it
# UNSAFEEXPAND=true

# The default image used to create the container. It uses the common notation of docker images. So
#  that if the image is not in the local repository, Docker will try to download it from dockerhub.
#
#  NOTE: This parameter can be customized for each user or group in its sections (i.e. [user:...] 
#  or [group:...]).
#
#  * Default: alpine:latest. Set the next line to the appropriate container image
CONTAINERIMAGE=ubuntu:latest

# The default command used to enter in the container (i.e. the shell that is provided to the user).
#  This parameter is very tightened to the image. That means that the container *must* include the
#  command. Otherwise DoSH will fail at creating the sessions. 
#
#  NOTE: This parameter can be customized for each user or group in its sections (i.e. [user:...] 
#  or [group:...]).
#
#  * Default: ash. Set the next line to the appropriate shell 
CONTAINERCOMMAND=bash

# Extra parameters to the Docker call. They are injected to the call to docker
#
#  NOTE: This parameter can be customized for each user or group in its sections (i.e. [user:...] 
#  or [group:...]).
#
#  NOTE: This parameter can appear as many times as needed along the file. If INHERIT is set to
#  true, it is possible to separate the creation of the final DOCKERPARAMETERS value.
#
#  * Default: None. The next line states a recommended set of parameters 
DOCKERPARAMETERS=-v /etc/passwd:/etc/passwd:ro -v /etc/group:/etc/group:ro -v /home/$USER:/home/$USER -w /home/$USER

# Inherit the "inheritable" values.
#
#  Some variables are inheritable. That means that in the subsections, the values are added to the
#  variable, instead of fully setting it.
#
#    E.g. if DOCKERPARAMETERS=-v /etc/passwd:/etc/passwd, INHERIT is set to true and we 
#      set DOCKERPARAMETERS=-v /home/$USER:/home/$USER, the final value will be
#      DOCKERFILE=-v /etc/passwd:/etc/passwd -v /home/$USER:/home/$USER
#   
#    E.g. if DOCKERPARAMETERS=-v /etc/passwd:/etc/passwd, INHERIT is set to false and we 
#      set DOCKERPARAMETERS=-v /home/$USER:/home/$USER, the final value will be
#      DOCKERFILE=-v /home/$USER:/home/$USER
#
#  * Default: true. Uncomment the next line to disable inheritation of commands
# INHERIT=false

# DoSH enables to run scripts before a docker command is to be called, and after it is called.
#  These commands enable the root to include a custom behaviour for the containers. E.g. delete
#  the container after exiting it, adding an extra NIC interface, etc.
#
# DoSH will run all the scripts in folder SCRIPTSFOLDER (sorted according to a 'ls' call) if the
#  variable RUNSCRIPTS is set to "true"
#
# Each command should recognise the options "prerun", "run", "prestart", "start", "preexec" and "exec"
#  that correspond to the moment in which the docker call is to be called. The set of possible calls 
#  to the commands and the extra parameters passed to the scripts are the next:
#  - <command> prerun <container id> <parameters to docker run> <docker image> <command>
#     * called before creating the container (i.e. docker run...), if the container does not exist.
#  - <command> run <container id> <parameters to docker run>  <docker image> <command>
#     * called after creating the container (i.e. docker run...), if the container does not exist.
#  - <command> prestart <container id>
#     * called before starting the container (i.e. docker start ...), if the container existed but it
#       was stopped (e.g. a reboot of the host)
#  - <command> start <container id>
#     * called after starting the container (i.e. docker start ...), if the container existed but it
#       was stopped (e.g. a reboot of the host)
#  - <command> preexec <container id> <command>
#     * called before creating the shell session in the container (i.e. docker exec)
#  - <command> exec <container id> <command>
#     * called after creating the shell session in the container (i.e. docker exec)
#
# The variable that control the behaviour of the scripts are the next:
#
#  * Default: false. Uncomment the next line to run scripts on docker calls
# RUNSCRIPTS=true
#
#  * Default: /etc/dosh/scripts. Uncomment the next line to customize the folder in which the 
#    scripts are expected to be stored.
# SCRIPTSFOLDER=/etc/dosh/scripts

# Customization for specific users or groups. Take in mind that the sections are processed
#   as they are found in the file. So if two sections are applicable to a user (e.g. there
#   are two user:username sections or there is a group:<group> and a user:<user> sections
#   that are applicable to him), the values are set in the order that appear in the file.
#   Moreover the extra configuration files in "CONF" are processed AFTER the whole file has
#   been processed.
#
# To customize the options for a specific user, you can create a subsection with the format
#   [user:<username>] and include the proper values inside.
#
# E.g.
#   [user:doshuser]
#   INHERIT=true
#   CONTAINERIMAGE=ubuntu:14.04
#   CONTAINERCOMMAND=/bin/bash
#   CONF=/etc/dosh/conf.d/doshuser.conf
#   DOCKERPARAMETERS=--device=/dev/nvidiactl --device=/dev/nvidia-uvm --device=/dev/nvidia0
#
# To customize the options for a specific group of users, you can create a subsection with 
#   the format [group:<groupname>] and include the proper values inside.
#
# E.g.
#   [group:doshgroup]
#   INHERIT=true
#   CONTAINERIMAGE=ubuntu:14.04
#   CONTAINERCOMMAND=/bin/bash
#   CONF=/etc/dosh/conf.d/doshuser.conf
#   DOCKERPARAMETERS=--device=/dev/nvidiactl --device=/dev/nvidia-uvm --device=/dev/nvidia0
